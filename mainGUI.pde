/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void webcamToggle1_click(GButton source, GEvent event) { //_CODE_:webcamToggle1:805281:
  println("webcamToggle1 - GButton >> GEvent." + event + " @ " + millis());
  if (cameraOn){
    cam.stop();
    cameraOn = false;
  }
  else {
    cam.start();
    cameraOn = true;
  }
} //_CODE_:webcamToggle1:805281:

public void button1_click1(GButton source, GEvent event) { //_CODE_:webcamToggle2:770107:
  println("webcamToggle2 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:webcamToggle2:770107:

public void webcamToggle3_click2(GButton source, GEvent event) { //_CODE_:webcamToggle3:664549:
  println("webcamToggle3 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:webcamToggle3:664549:

public void webcamToggle4_click1(GButton source, GEvent event) { //_CODE_:webcamToggle4:448816:
  println("webcamToggle4 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:webcamToggle4:448816:

public void playButton_click1(GButton source, GEvent event) { //_CODE_:playButton:303223:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:playButton:303223:

public void recordButton_click1(GButton source, GEvent event) { //_CODE_:recordButton:346637:
  println("recordButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:recordButton:346637:

public void openButton_click1(GButton source, GEvent event) { //_CODE_:openButton:947106:
  println("openButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:openButton:947106:

public void rpmSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:rpmSlider:243285:
  println("custom_slider1 - GCustomSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:rpmSlider:243285:

// Create all the GUI controls. 
// autogenerated do not edit
public void mainGUI(){
  mainWindow = GWindow.getWindow(this, "Main Screen", 0, 0, 1280, 1080, JAVA2D);
  
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(9);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  
  mainWindow.addDrawHandler(this, "mainWindowDraw");
  mainWindow.addMouseHandler(this, "mainWindowMouse");
  mainWindow.addKeyHandler(this, "mainWindowKey");
  
  cam = new Capture(mainWindow, 320, 240);
  cam.start();
  cameraOn = true;

  webcamToggle1 = new GButton(mainWindow, 20, 250, 80, 30);
  webcamToggle1.setText("Toggle Webcam");
  webcamToggle1.addEventHandler(this, "webcamToggle1_click");
  webcamToggle2 = new GButton(mainWindow, 260, 250, 80, 30);
  webcamToggle2.setText("Toggle Webcam");
  webcamToggle2.addEventHandler(this, "button1_click1");
  webcamToggle3 = new GButton(mainWindow, 20, 530, 80, 30);
  webcamToggle3.setText("Toggle Webcam");
  webcamToggle3.addEventHandler(this, "webcamToggle3_click2");
  webcamToggle4 = new GButton(mainWindow, 260, 530, 80, 30);
  webcamToggle4.setText("Toggle Webcam");
  webcamToggle4.addEventHandler(this, "webcamToggle4_click1");
  playButton = new GButton(mainWindow, 800, 30, 100, 50);
  playButton.setText("PLAY");
  playButton.addEventHandler(this, "playButton_click1");
  recordButton = new GButton(mainWindow, 920, 30, 100, 50);
  recordButton.setText("RECORD");
  recordButton.addEventHandler(this, "recordButton_click1");
  openButton = new GButton(mainWindow, 1040, 30, 100, 50);
  openButton.setText("OPEN FILE");
  openButton.addEventHandler(this, "openButton_click1");
  rpmSlider = new GCustomSlider(mainWindow, 850, 490, 220, 40, "grey_blue");
  rpmSlider.setLimits(0.5, 0.0, 1.0);
  rpmSlider.setNumberFormat(G4P.DECIMAL, 2);
  rpmSlider.setOpaque(false);
  rpmSlider.addEventHandler(this, "rpmSlider_change1");
  
  //Load in a sound files wihin a given folder
  makeRadialArray(mainWindow, findSoundFilesInDirectory(sketchPath() + "/data"));
  
}

public void mainWindowDraw(PApplet app, GWinData data) {
  MyWinData mainData = (MyWinData)data;
  
  if (radials.length != 0) {
    for (int i = 0; i < radials.length; i++) {
      radials[i].update();
      radials[i].display(180, COLOR);
    }
  }
  if (cam.available()){
    cam.read();
    app.image(cam, 10, 10);
  }
}

public void mainWindowMouse(PApplet app, GWinData data, MouseEvent event) {
  MyWinData mainData = (MyWinData)data;
  
  // once the mouse is released, make all Radial handles inactive
  if (event.getAction() == MouseEvent.RELEASE) {
    for (int i = 0; i < radials.length; i++) {
      radials[i].releaseHandleEvent();
    }
  }  
}

public void mainWindowKey(PApplet app, GWinData data, KeyEvent event) {
  MyWinData mainData = (MyWinData)data;
}

// Variable declarations 
// autogenerated do not edit
GButton webcamToggle1; 
GButton webcamToggle2; 
GButton webcamToggle3; 
GButton webcamToggle4; 
GButton playButton; 
GButton recordButton; 
GButton openButton; 
GCustomSlider rpmSlider; 
